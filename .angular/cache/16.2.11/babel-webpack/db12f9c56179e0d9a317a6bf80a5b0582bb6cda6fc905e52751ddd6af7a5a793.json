{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000'; // Sostituisci con l'URL del tuo server Node.js\n  }\n\n  getPostList() {\n    return this.http.get(`${this.baseUrl}/api/posts`);\n  }\n  getPostContent(filename) {\n    return this.http.get(`${this.baseUrl}/api/posts/${filename}`).pipe(map(content => this.parsePostContent(content)));\n  }\n  parsePostContent(content) {\n    // Dividi il contenuto del post in un array di array utilizzando il separatore ~~~\n    const lines = content.split('\\n');\n    const postArray = lines.map(line => line.split('~~~'));\n    return postArray;\n  }\n  static #_ = this.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","PostService","constructor","http","baseUrl","getPostList","get","getPostContent","filename","pipe","content","parsePostContent","lines","split","postArray","line","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\andre\\Documents\\GitHub\\andreadedonato\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private baseUrl = 'http://localhost:3000'; // Sostituisci con l'URL del tuo server Node.js\n\n  constructor(private http: HttpClient) {}\n\n  getPostList(): Observable<string[]> {\n    return this.http.get<string[]>(`${this.baseUrl}/api/posts`);\n  }\n  \n  getPostContent(filename: string): Observable<string[][]> {\n    return this.http.get<string[]>(`${this.baseUrl}/api/posts/${filename}`)\n      .pipe(map(content => this.parsePostContent(content)));\n  }\n\n  private parsePostContent(content: string): string[][] {\n    // Dividi il contenuto del post in un array di array utilizzando il separatore ~~~\n    const lines = content.split('\\n');\n    const postArray = lines.map(line => line.split('~~~'));\n    return postArray;\n  }\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAEJ;;EAEvCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,YAAY,CAAC;EAC7D;EAEAG,cAAcA,CAACC,QAAgB;IAC7B,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,cAAcI,QAAQ,EAAE,CAAC,CACpEC,IAAI,CAACT,GAAG,CAACU,OAAO,IAAI,IAAI,CAACC,gBAAgB,CAACD,OAAO,CAAC,CAAC,CAAC;EACzD;EAEQC,gBAAgBA,CAACD,OAAe;IACtC;IACA,MAAME,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC;IACjC,MAAMC,SAAS,GAAGF,KAAK,CAACZ,GAAG,CAACe,IAAI,IAAIA,IAAI,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC;IACtD,OAAOC,SAAS;EAClB;EAAC,QAAAE,CAAA,G;qBAnBUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}