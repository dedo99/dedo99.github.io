{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/post.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction BlogComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function BlogComponent_div_2_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const post_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.redirectToPostDatails(post_r1));\n    });\n    i0.ɵɵelementStart(1, \"div\")(2, \"b\");\n    i0.ɵɵtext(3, \"Title:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\")(7, \"b\");\n    i0.ɵɵtext(8, \"Category:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\")(12, \"b\");\n    i0.ɵɵtext(13, \"Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"p\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const post_r1 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(post_r1.title);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(post_r1.category);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(post_r1.date);\n  }\n}\nexport class BlogComponent {\n  constructor(postService, router) {\n    this.postService = postService;\n    this.router = router;\n    this.post_list = [];\n  }\n  ngOnInit() {\n    this.getCsvData();\n  }\n  getCsvData() {\n    this.postService.getCsvData('assets/posts_data.csv').subscribe(data => {\n      this.post_list = this.parseCsvData(data);\n      console.log(this.post_list);\n    }, error => {\n      console.log('Si è verificato un errore:', error);\n    });\n  }\n  parseCsvData(csvData) {\n    // Implementa il parsing del CSV qui\n    // Ad esempio, puoi dividere le righe e le colonne\n    let post_string = csvData.split('\\n').map(row => row.split(';'));\n    let posts = [];\n    for (const iterator of post_string) {\n      let post = {\n        id: Number(iterator[0]),\n        title: iterator[1],\n        category: iterator[2],\n        content: iterator[3],\n        image: iterator[4],\n        date: iterator[5]\n      };\n      posts.push(post);\n    }\n    return posts;\n  }\n  redirectToPostDatails(post) {\n    let navigationExtras = {\n      state: {\n        post: post\n      }\n    };\n    this.router.navigate(['/post'], navigationExtras);\n  }\n  static #_ = this.ɵfac = function BlogComponent_Factory(t) {\n    return new (t || BlogComponent)(i0.ɵɵdirectiveInject(i1.PostService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BlogComponent,\n    selectors: [[\"app-blog\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[\"class\", \"post_box\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"post_box\", 3, \"click\"]],\n    template: function BlogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Tutti i Post\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, BlogComponent_div_2_Template, 16, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.post_list);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\"h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%]{\\n    text-align: center;\\n    color: white;\\n    margin: 0px;\\n    padding: 20px;\\n}\\n\\np[_ngcontent-%COMP%]{\\n    text-align: center;\\n    color: white;\\n    padding: 0px;\\n    margin: 0px;\\n}\\n\\nb[_ngcontent-%COMP%]{\\n    text-align: center;\\n    color: #10a939;\\n    padding: 0px;\\n    margin: 0px;\\n}\\n\\n.post_box[_ngcontent-%COMP%]{\\n    border-radius: 20px;\\n    height: 50px;\\n    width: 70%;\\n    margin: 10px 15%;\\n    border: 2px solid red;\\n    display: flex;\\n    justify-content: space-around;\\n    align-items: center;\\n    background-color: #363636;\\n}\\n\\n.post_box[_ngcontent-%COMP%]:hover{\\n    background-color: orange;\\n    transition-duration: 0.5s;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYmxvZy9ibG9nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFdBQVc7SUFDWCxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGNBQWM7SUFDZCxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLHFCQUFxQjtJQUNyQixhQUFhO0lBQ2IsNkJBQTZCO0lBQzdCLG1CQUFtQjtJQUNuQix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSx3QkFBd0I7SUFDeEIseUJBQXlCO0FBQzdCIiwic291cmNlc0NvbnRlbnQiOlsiaDEsIGgyLCBoMywgaDR7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBtYXJnaW46IDBweDtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbn1cclxuXHJcbnB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICBtYXJnaW46IDBweDtcclxufVxyXG5cclxuYntcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGNvbG9yOiAjMTBhOTM5O1xyXG4gICAgcGFkZGluZzogMHB4O1xyXG4gICAgbWFyZ2luOiAwcHg7XHJcbn1cclxuXHJcbi5wb3N0X2JveHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gICAgbWFyZ2luOiAxMHB4IDE1JTtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzYzNjM2O1xyXG59XHJcblxyXG4ucG9zdF9ib3g6aG92ZXJ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XHJcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","BlogComponent_div_2_Template_div_click_0_listener","restoredCtx","ɵɵrestoreView","_r3","post_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","redirectToPostDatails","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","title","category","date","BlogComponent","constructor","postService","router","post_list","ngOnInit","getCsvData","subscribe","data","parseCsvData","console","log","error","csvData","post_string","split","map","row","posts","iterator","post","id","Number","content","image","push","navigationExtras","state","navigate","_","ɵɵdirectiveInject","i1","PostService","i2","Router","_2","selectors","decls","vars","consts","template","BlogComponent_Template","rf","ctx","ɵɵtemplate","BlogComponent_div_2_Template","ɵɵproperty"],"sources":["C:\\Users\\andre\\Documents\\GitHub\\andreadedonato\\src\\app\\blog\\blog.component.ts","C:\\Users\\andre\\Documents\\GitHub\\andreadedonato\\src\\app\\blog\\blog.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PostService } from '../services/post.service';\nimport { Post } from '../models/post.model';\nimport { NavigationExtras, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.css']\n})\nexport class BlogComponent implements OnInit {\n\n  post_list: Post[] = [];\n\n  constructor(private postService: PostService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.getCsvData();\n  }\n\n  getCsvData() {\n    this.postService.getCsvData('assets/posts_data.csv').subscribe(\n      data => {\n        this.post_list = this.parseCsvData(data);\n        console.log(this.post_list)\n      },\n      error => {\n        console.log('Si è verificato un errore:', error);\n      }\n    );\n  }\n\n  parseCsvData(csvData: string): Post[] {\n    // Implementa il parsing del CSV qui\n    // Ad esempio, puoi dividere le righe e le colonne\n    let post_string: string[][] = csvData.split('\\n').map(row => row.split(';'));\n    let posts: Post[] = [];\n    for (const iterator of post_string) {\n      let post: Post = {\n        id: Number(iterator[0]),\n        title: iterator[1],\n        category: iterator[2],\n        content: iterator[3],\n        image: iterator[4],\n        date: iterator[5]\n      };\n      posts.push(post);\n    }\n    return posts;\n  }\n\n  redirectToPostDatails(post: Post): void{\n    let navigationExtras: NavigationExtras = {\n      state: {\n        post: post\n      }\n    };\n    this.router.navigate(['/post'], navigationExtras);\n  }\n\n}\n","<h1>Tutti i Post</h1>\n<div *ngFor=\"let post of post_list\" class=\"post_box\" (click)=\"redirectToPostDatails(post)\">\n    <div>\n        <b>Title:</b>\n        <p>{{post.title}}</p>\n    </div>\n    <div>\n        <b>Category:</b>\n        <p>{{post.category}}</p>\n    </div>\n    <div>\n        <b>Date:</b>\n        <p>{{post.date}}</p>\n    </div>\n</div>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}