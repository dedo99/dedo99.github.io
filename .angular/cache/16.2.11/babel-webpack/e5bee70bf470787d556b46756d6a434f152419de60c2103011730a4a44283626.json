{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BlogComponent = class BlogComponent {\n  constructor(postService, router) {\n    this.postService = postService;\n    this.router = router;\n    this.post_list = [];\n  }\n  ngOnInit() {\n    this.getCsvData();\n  }\n  getCsvData() {\n    this.postService.getCsvData('assets/posts_data.csv').subscribe(data => {\n      this.post_list = this.parseCsvData(data);\n      console.log(this.post_list);\n    }, error => {\n      console.log('Si è verificato un errore:', error);\n    });\n  }\n  parseCsvData(csvData) {\n    // Implementa il parsing del CSV qui\n    // Ad esempio, puoi dividere le righe e le colonne\n    let post_string = csvData.split('\\n').map(row => row.split(';'));\n    let posts = [];\n    for (const iterator of post_string) {\n      let post = {\n        id: Number(iterator[0]),\n        title: iterator[1],\n        category: iterator[2],\n        content: iterator[3],\n        image: iterator[4],\n        date: iterator[5]\n      };\n      posts.push(post);\n    }\n    return posts;\n  }\n  redirectToPostDatails(post) {\n    let navigationExtras = {\n      state: {\n        post: post\n      }\n    };\n    this.router.navigate(['/post'], navigationExtras);\n  }\n};\nBlogComponent = __decorate([Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.css']\n})], BlogComponent);","map":{"version":3,"names":["Component","BlogComponent","constructor","postService","router","post_list","ngOnInit","getCsvData","subscribe","data","parseCsvData","console","log","error","csvData","post_string","split","map","row","posts","iterator","post","id","Number","title","category","content","image","date","push","redirectToPostDatails","navigationExtras","state","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\andre\\Documents\\GitHub\\andreadedonato\\src\\app\\blog\\blog.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PostService } from '../services/post.service';\nimport { Post } from '../models/post.model';\nimport { NavigationExtras, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.css']\n})\nexport class BlogComponent implements OnInit {\n\n  post_list: Post[] = [];\n\n  constructor(private postService: PostService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.getCsvData();\n  }\n\n  getCsvData() {\n    this.postService.getCsvData('assets/posts_data.csv').subscribe(\n      data => {\n        this.post_list = this.parseCsvData(data);\n        console.log(this.post_list)\n      },\n      error => {\n        console.log('Si è verificato un errore:', error);\n      }\n    );\n  }\n\n  parseCsvData(csvData: string): Post[] {\n    // Implementa il parsing del CSV qui\n    // Ad esempio, puoi dividere le righe e le colonne\n    let post_string: string[][] = csvData.split('\\n').map(row => row.split(';'));\n    let posts: Post[] = [];\n    for (const iterator of post_string) {\n      let post: Post = {\n        id: Number(iterator[0]),\n        title: iterator[1],\n        category: iterator[2],\n        content: iterator[3],\n        image: iterator[4],\n        date: iterator[5]\n      };\n      posts.push(post);\n    }\n    return posts;\n  }\n\n  redirectToPostDatails(post: Post): void{\n    let navigationExtras: NavigationExtras = {\n      state: {\n        post: post\n      }\n    };\n    this.router.navigate(['/post'], navigationExtras);\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAF5D,KAAAC,SAAS,GAAW,EAAE;EAEkD;EAExEC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,IAAI,CAACJ,WAAW,CAACI,UAAU,CAAC,uBAAuB,CAAC,CAACC,SAAS,CAC5DC,IAAI,IAAG;MACL,IAAI,CAACJ,SAAS,GAAG,IAAI,CAACK,YAAY,CAACD,IAAI,CAAC;MACxCE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,CAAC;IAC7B,CAAC,EACDQ,KAAK,IAAG;MACNF,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,KAAK,CAAC;IAClD,CAAC,CACF;EACH;EAEAH,YAAYA,CAACI,OAAe;IAC1B;IACA;IACA,IAAIC,WAAW,GAAeD,OAAO,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5E,IAAIG,KAAK,GAAW,EAAE;IACtB,KAAK,MAAMC,QAAQ,IAAIL,WAAW,EAAE;MAClC,IAAIM,IAAI,GAAS;QACfC,EAAE,EAAEC,MAAM,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvBI,KAAK,EAAEJ,QAAQ,CAAC,CAAC,CAAC;QAClBK,QAAQ,EAAEL,QAAQ,CAAC,CAAC,CAAC;QACrBM,OAAO,EAAEN,QAAQ,CAAC,CAAC,CAAC;QACpBO,KAAK,EAAEP,QAAQ,CAAC,CAAC,CAAC;QAClBQ,IAAI,EAAER,QAAQ,CAAC,CAAC;OACjB;MACDD,KAAK,CAACU,IAAI,CAACR,IAAI,CAAC;;IAElB,OAAOF,KAAK;EACd;EAEAW,qBAAqBA,CAACT,IAAU;IAC9B,IAAIU,gBAAgB,GAAqB;MACvCC,KAAK,EAAE;QACLX,IAAI,EAAEA;;KAET;IACD,IAAI,CAACjB,MAAM,CAAC6B,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAEF,gBAAgB,CAAC;EACnD;CAED;AAlDY9B,aAAa,GAAAiC,UAAA,EALzBlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWpC,aAAa,CAkDzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}